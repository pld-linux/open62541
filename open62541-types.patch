--- open62541-1.3.2/tools/tpm_keystore/cert_encrypt_tpm.c.orig	2022-06-24 11:05:00.000000000 +0200
+++ open62541-1.3.2/tools/tpm_keystore/cert_encrypt_tpm.c	2022-07-02 17:39:33.382785211 +0200
@@ -21,7 +21,7 @@ typedef enum { B_FALSE, B_TRUE } boolean
 
 typedef struct binary_data binary_data;
 struct binary_data {
-  long length;
+  size_t length;
   void *data;
 };
 
@@ -101,9 +101,9 @@ static CK_RV encrypt(int slotNum, unsign
     unsigned int expected_md_len = 32;
     binary_data *out_data = *encrypted_data;
     uint32_t i;
-    CK_RV rv;
+    CK_RV rv = 0;
 
-    CK_BYTE *data_encrypted;
+    CK_BYTE *data_encrypted = NULL;
     CK_ULONG clear_data_length;
     CK_ULONG encrypted_data_length = 0;
     CK_ULONG enclen = 16;
@@ -212,7 +212,7 @@ static CK_RV encrypt(int slotNum, unsign
     /* Add 16 bytes because encrypt final does not accept the data bytes */
     clear_data_length +=16;
 
-    CK_BYTE_PTR ptr_clear_data;
+    CK_BYTE_PTR ptr_clear_data = NULL;
     ptr_clear_data = (CK_BYTE *)(malloc(clear_data_length * sizeof(CK_BYTE)));
     memset(ptr_clear_data, 0, clear_data_length);
     /* Copy the data into the bytes that will be encrypted */
@@ -253,7 +253,7 @@ static CK_RV encrypt(int slotNum, unsign
     /* Add 56 more bytes. 16 bytes will hold the iv
        The next 8 bytes will be an unsigned long (uint64_t) that indicates the original data length
        The last 32 bytes are for the HMAC */
-    long out_data_length = (long)(encrypted_data_length + (long unsigned int)iv_data->length + sizeof(uint64_t) + expected_md_len);
+    size_t out_data_length = (size_t)(encrypted_data_length + (long unsigned int)iv_data->length + sizeof(uint64_t) + expected_md_len);
     if (out_data->data) {
         free(out_data->data);
         out_data->length = 0;
@@ -325,7 +325,7 @@ static binary_data* read_input_file(cons
                             /* Read the whole file to buffer */
                             const long length = (const long)fread(buff, 1, (size_t)end_position, f_in);
                             if (length == end_position) {
-                                data->length = end_position;
+                                data->length = (size_t)end_position;
                                 data->data = buff;
 
                                 fclose(f_in);
--- open62541-1.3.2/plugins/crypto/pkcs11/securitypolicy_pubsub_aes128ctr_tpm.c.orig	2022-07-02 17:51:35.142208438 +0200
+++ open62541-1.3.2/plugins/crypto/pkcs11/securitypolicy_pubsub_aes128ctr_tpm.c	2022-07-02 17:51:38.458857136 +0200
@@ -351,8 +351,10 @@ sign_sp_pubsub_aes128ctr_tpm(PUBSUB_AES1
     }
 
     /* Signs data in a single part, where the signature is an appendix to the data */
+    unsigned long siglen = signature->length;
     rv = (UA_StatusCode)C_Sign(cc->policyContext->sessionHandle, data->data, data->length,
-                              (CK_BYTE_PTR)signature->data, &signature->length);
+                              (CK_BYTE_PTR)signature->data, &siglen);
+    signature->length = siglen;
     if (rv != UA_STATUSCODE_GOOD) {
         UA_LOG_ERROR(cc->policyContext->securityPolicy->logger, UA_LOGCATEGORY_SECURITYPOLICY,
                      "Signing failed 0x%.8lX", (long unsigned int)rv);
--- open62541-1.3.2/plugins/crypto/pkcs11/securitypolicy_pubsub_aes256ctr_tpm.c.orig	2022-06-24 11:05:00.000000000 +0200
+++ open62541-1.3.2/plugins/crypto/pkcs11/securitypolicy_pubsub_aes256ctr_tpm.c	2022-07-02 17:52:12.062008426 +0200
@@ -357,8 +357,10 @@ sign_sp_pubsub_aes256ctr_tpm(PUBSUB_AES2
     }
 
     /* Signs data in a single part, where the signature is an appendix to the data */
+    unsigned long siglen = signature->length;
     rv = (UA_StatusCode)C_Sign(cc->policyContext->sessionHandle, data->data, data->length,
-                              (CK_BYTE_PTR)signature->data, &signature->length);
+                              (CK_BYTE_PTR)signature->data, &siglen);
+    signature->length = siglen;
     if (rv != UA_STATUSCODE_GOOD) {
         UA_LOG_ERROR(cc->policyContext->securityPolicy->logger, UA_LOGCATEGORY_SECURITYPOLICY,
                      "Signing failed 0x%.8lX", (long unsigned int)rv);
